#!/hint/bash
#
# /etc/makepkg.conf
#

ulimit -s 2048

unset LIBRARY_PATH CPATH C_INCLUDE_PATH PKG_CONFIG_PATH CPLUS_INCLUDE_PATH INCLUDE

##Downgrade Compile
#x86:    all(AppleM1)i386(pentium2/Klamath)i486(pentium3m/)i586(pentium-m/Banias)i686(core2quad/Penryn)
#x86_64: all(AppleM?)generic(Haswell:pci3.0)znver2(Rocketlake:pci4.0)znver5(Lunarlake:pci5.0)novalake(???:pci6.0)

if [[ -z "$ARCH" ]]; then
    case "$( uname -m )" in
                 i386 )    ABI='32'          arch='pentiumpro'      CARCH='i386'           CHOST='i386-pc-linux-gnu'                    ;;
                 i486 )    ABI='32'          arch='pentium2'        CARCH='i486'           CHOST='i486-pc-linux-gnu'                    ;;
                 i586 )    ABI='32'          arch='pentium3m'       CARCH='i586'           CHOST='i586-pc-linux-gnu'                    ;;
                 i686 )    ABI='32'          arch='pentium-m'       CARCH='i686'           CHOST='i686-pc-linux-gnu'                    ;;
               x86_64 )    ABI='whatever'    arch='bonnell'         CARCH='x86_64'         CHOST='x86_64-pc-linux-gnu'                  ;;
            core-avx2 )    ABI='whatever'    arch='haswell'         CARCH='x86_64'         CHOST='x86_64-pc-linux-gnu'                  ;;
            core-vnni )    ABI='whatever'    arch='rocketlake'      CARCH='x86_64'         CHOST='x86_64-pc-linux-gnu'                  ;;
             novalake )    ABI='whatever'    arch='novalake'        CARCH='x86_64'         CHOST='x86_64-pc-linux-gnu'                  ;;
                 arm* )    ABI='64'          arch='armv8.2a+crc'    CARCH='armv8'          CHOST='aarch64-unknown-linux-gnu'            ;;
               riscv* )    ABI='64'          arch='rv64gc'          CARCH='riscv'          CHOST='riscv64-unknown-linux-gnu'            ;;
                    * )    ABI='whatever'    arch="$(uname -m)"     CARCH='$(uname -m)'    CHOST='$(uname -m)-$(uname -i)-linux-gnu'    ;;
    esac
fi

##This file contains the definitions for the optimization settings used by GentooLTO.
#source this file directly in your make.conf if you want to cherry-pick settings
#and don't want to use the make.conf.lto default configuration, defining the number of threads
#to use during the LTO process beforehand:

#readelf() { /usr/bin/env llvm-readelf -- "${@}" ; }
#strip() { /usr/bin/env llvm-strip -- "${@}" ; }
#config() { /usr/bin/env llvm-config -- "${@}" ; }
#ranlib() { /usr/bin/env llvm-ranlib -- "${@}" ; }
#objcopy() { /usr/bin/env llvm-objcopy -- "${@}" ; }
#nm() { /usr/bin/env llvm-nm -- "${@}" ; }
#ar() { /usr/bin/env llvm-ar -- "${@}" ; }
#as() { /usr/bin/env llvm-as -- "${@}" ; }
#gcc() { /usr/bin/env clang -- "${@}" ; }
#g++() { /usr/bin/env clang++ -- "${@}" ; }
#cc() { /usr/bin/env clang-cc -- "${@}" ; }
#cpp() { /usr/bin/env clang-cpp -- "${@}" ; }
#ld() { /usr/bin/env ld.gold -- "${@}" ; }
#egrep() { /usr/bin/grep -E -- "${@}" ; }

TERM="${TERM}"
PREFIX=/usr
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: 'protocol::agent'
DLAGENTS=('file::/usr/bin/curl -qgC - -o %o %u'
          'ftp::/usr/bin/curl -qgfC - --ftp-pasv --retry 5 --retry-delay 15 -o %o %u'
          'http::/usr/bin/curl -qgb "" -fLC - --retry 5 --retry-delay 15 -o %o %u'
          'https::/usr/bin/curl -qgb "" -fLC - --retry 5 --retry-delay 15 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')

# Other common tools:
# /usr/bin/snarf
# /usr/bin/lftpget -c
# /usr/bin/wget

#-- The package required by makepkg to download VCS sources
#  Format: 'protocol::package'
VCSCLIENTS=('bzr::bzr'
            'fossil::fossil'
            'git::git'
            'hg::mercurial'
            'svn::subversion')

# Added to /etc/portage/package.use/clang
# sys-devel/clang graphite -lto
#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
CFLAGS="${CFLAGS:--march=${arch} -falign-functions}"
CXXFLAGS="${CXXFLAGS:--march=${arch} -falign-functions}"
MAKEFLAGS="${MAKEFLAGS:--j 1 -l 16768 -e}"

## USE ## trying to reduce the use matrix to proper package.use... for now helping in that aim.
##USE="${USE} custom-cflags lto pgo gold -default-gold"

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Makepkg defaults: BUILDENV=(!distcc !color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
#
BUILDENV=(!distcc color !ccache check !sign)
#
#-- If using DistCC, your MAKEFLAGS will also need modification. In addition,
#-- specify a space-delimited list of hosts running in the DistCC cluster.
#DISTCC_HOSTS=""
#
#-- Specify a directory for package building.
#BUILDDIR=/tmp/makepkg

#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Makepkg defaults: OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug !lto)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- debug:      Add debugging flags as specified in DEBUG_* variables
#-- lto:        Add compile flags for building with link time optimization
#
OPTIONS=(!strip docs libtool staticlibs emptydirs zipman purge debug lto)

#-- File integrity checks to use. Valid: md5, sha1, sha224, sha256, sha384, sha512, b2
INTEGRITY_CHECK=(sha256)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)
#-- Directory to store source code in for debug packages
DBGSRCDIR="/usr/src/debug"

#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: put built package and cached source in build directory
#
#-- Destination: specify a fixed directory where all packages will be placed
#PKGDEST=/home/packages
#-- Source cache: specify a fixed directory where source files will be cached
#SRCDEST=/home/sources
#-- Source packages: specify a fixed directory where all src packages will be placed
#SRCPKGDEST=/home/srcpackages
#-- Log files: specify a fixed directory where all log files will be placed
#LOGDEST=/home/makepkglogs
#-- Packager: name/email of the person or organization building packages
#PACKAGER="John Doe <john@doe.com>"
#-- Specify a key to use for package signing
#GPGKEY=""

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(gzip -c -f -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z --threads=0 -)
COMPRESSZST=(zstd -c -z -q --threads=0 -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lzop -q)
COMPRESSZ=(compress -c -f)
COMPRESSLZ4=(lz4 -q)
COMPRESSLZ=(lzip -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
PKGEXT='.pkg.tar.lzo'
SRCEXT='.src.tar.xz'

#########################################################################
# OTHER
#########################################################################
#
#-- Command used to run pacman as root, instead of trying sudo and su
#PACMAN_AUTH=()
